/**
 * ƒê·ªãnh nghƒ©a ki·ªÉu `StringArray` l√† m·ªôt m·∫£ng ch·ª©a c√°c ph·∫ßn t·ª≠ ki·ªÉu `string`.
 */
type StringArray = string[];

/**
 * Mapped type `ElementType` ƒë·ªÉ l·∫•y ki·ªÉu c·ªßa ph·∫ßn t·ª≠ trong m·∫£ng `T`.
 * D√πng `T[number]` ƒë·ªÉ tr√≠ch xu·∫•t ki·ªÉu c·ªßa ph·∫ßn t·ª≠ t·∫°i ch·ªâ s·ªë b·∫•t k·ª≥ trong m·∫£ng `T`.
 *
 * @template T - Ki·ªÉu c·ªßa m·∫£ng (ph·∫£i l√† m·∫£ng ki·ªÉu `any[]`).
 * @example
 * Khi `T = string[]`, `ElementType<T>` s·∫Ω tr·∫£ v·ªÅ ki·ªÉu `string`.
 * Khi `T = number[]`, `ElementType<T>` s·∫Ω tr·∫£ v·ªÅ ki·ªÉu `number`.
 */
type ElementType<T extends any[]> = T[number];

/**
 * Ki·ªÉu `Example1` s·∫Ω l·∫•y ki·ªÉu ph·∫ßn t·ª≠ c·ªßa m·∫£ng `StringArray`.
 * `StringArray` c√≥ ki·ªÉu l√† `string[]`, v√¨ v·∫≠y ki·ªÉu ph·∫ßn t·ª≠ c·ªßa m·∫£ng n√†y l√† `string`.
 */
type Example1 = ElementType<StringArray>; // K·∫øt qu·∫£: `string`

// V√≠ d·ª• 1: Khai b√°o m·ªôt bi·∫øn c√≥ ki·ªÉu `string[]`
let stringArray: StringArray = ['hello', 'world'];

/**
 * ƒê·ªãnh nghƒ©a bi·∫øn `text` l√† m·ªôt s·ªë `1`.
 * Khi d√πng `typeof text`, ta l·∫•y ki·ªÉu c·ªßa bi·∫øn `text`, trong tr∆∞·ªùng h·ª£p n√†y l√† `number`.
 *
 * Tuy nhi√™n, khi d√πng `ElementType<typeof text>`, b·∫°n s·∫Ω g·∫∑p l·ªói v√¨ `text` kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng.
 */
let text = 1;

/**
 * Ki·ªÉu `Example2` d√πng `ElementType<typeof text>`, nh∆∞ng v√¨ `text` l√† m·ªôt gi√° tr·ªã ƒë∆°n, kh√¥ng ph·∫£i m·∫£ng,
 * n√™n `ElementType<typeof text>` kh√¥ng h·ª£p l·ªá v√† s·∫Ω g√¢y ra l·ªói bi√™n d·ªãch.
 *
 * @example
 * Khi `text` l√† s·ªë (`1`), `ElementType<typeof text>` kh√¥ng th·ªÉ ho·∫°t ƒë·ªông v√¨ kh√¥ng ph·∫£i l√† m·∫£ng.
 */
// type Example2 = ElementType<typeof text>; // L·ªói: `text` kh√¥ng ph·∫£i l√† m·∫£ng.

/**
 * S·ª≠a l·ªói b·∫±ng c√°ch thay `text` th√†nh m·ªôt m·∫£ng:
 * - `text` l√† m·∫£ng ki·ªÉu `number[]`.
 * - `ElementType<typeof text>` s·∫Ω tr·∫£ v·ªÅ ki·ªÉu c·ªßa ph·∫ßn t·ª≠ trong m·∫£ng (l√† `number`).
 */
let textArray = [1, 2, 3];

/**
 * Ki·ªÉu `Example2` s·∫Ω tr·∫£ v·ªÅ ki·ªÉu ph·∫ßn t·ª≠ trong m·∫£ng `textArray`, trong tr∆∞·ªùng h·ª£p n√†y l√† `number`.
 */
type Example2 = ElementType<typeof textArray>; // K·∫øt qu·∫£: `number`

/**
 * V√≠ d·ª• v·ªÅ vi·ªác truy xu·∫•t ki·ªÉu ph·∫ßn t·ª≠ trong m·ªôt m·∫£ng v·ªõi ki·ªÉu `ElementType`.
 * `textArray` c√≥ ki·ªÉu `number[]`, v√¨ v·∫≠y `ElementType<typeof textArray>` s·∫Ω l√† `number`.
 */
console.log(typeof textArray[0]); // In ra: `number`

/**
 * Ki·ªÉu `GetElementType<T>` s·ª≠ d·ª•ng conditional type (ki·ªÉu ƒëi·ªÅu ki·ªán).
 *
 * M·ª•c ti√™u: l·∫•y ki·ªÉu c·ªßa ph·∫ßn t·ª≠ b√™n trong m·∫£ng `T` n·∫øu `T` l√† m·ªôt m·∫£ng.
 *
 * - N·∫øu `T` m·ªü r·ªông (extends) `any[]`, th√¨ k·∫øt qu·∫£ l√† `T[number]` (ki·ªÉu ph·∫ßn t·ª≠ trong m·∫£ng).
 * - Ng∆∞·ª£c l·∫°i, n·∫øu `T` kh√¥ng ph·∫£i l√† m·∫£ng, th√¨ k·∫øt qu·∫£ l√† `never`.
 *
 * @template T - Ki·ªÉu ƒë·∫ßu v√†o c·∫ßn ki·ªÉm tra (c√≥ th·ªÉ l√† m·∫£ng ho·∫∑c kh√¥ng).
 * @example
 * GetElementType<string[]> // üëâ string
 * GetElementType<number>   // üëâ never
 */
type GetElementType<T> = T extends any[] ? T[number] : never;

/**
 * V√≠ d·ª•: √°p d·ª•ng `GetElementType` v·ªõi `StringArray`.
 * V√¨ `StringArray` l√† `string[]`, n√™n k·∫øt qu·∫£ l√† `string`.
 */
type Example3 = GetElementType<StringArray>; // ‚úÖ string

/**
 * Khai b√°o m·ªôt bi·∫øn s·ªë nguy√™n th√¥ng th∆∞·ªùng.
 */
let text = 1;

/**
 * V√≠ d·ª•: √°p d·ª•ng `GetElementType` v·ªõi ki·ªÉu c·ªßa bi·∫øn `text`.
 * V√¨ `text` l√† `number` (kh√¥ng ph·∫£i m·∫£ng), n√™n k·∫øt qu·∫£ l√† `never`.
 */
type Example4 = GetElementType<typeof text>; // ‚ùå never (v√¨ kh√¥ng ph·∫£i m·∫£ng)

/**
 * Ki·ªÉu ƒë·ªãnh nghƒ©a m·ªôt ng∆∞·ªùi c√≥ h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß.
 */
type FullNamePerson = {
    firstName: string;
    lastName: string;
};

/**
 * Ki·ªÉu ƒëi·ªÅu ki·ªán: n·∫øu T m·ªü r·ªông FullNamePerson th√¨ tr·∫£ v·ªÅ string, ng∆∞·ª£c l·∫°i l√† never.
 *
 * @template T - Ki·ªÉu ƒë∆∞·ª£c ki·ªÉm tra.
 * @example
 * FullNameOrNothing<{ firstName: string, lastName: string }> // => string
 * FullNameOrNothing<{}>                                      // => never
 */
type FullNameOrNothing<T> = T extends FullNamePerson ? string : never;

/**
 * H√†m l·∫•y h·ªç t√™n ƒë·∫ßy ƒë·ªß t·ª´ m·ªôt object n·∫øu n√≥ c√≥ ƒë·ªß firstName v√† lastName.
 *
 * @param person - M·ªôt object b·∫•t k·ª≥.
 * @returns Chu·ªói h·ªç t√™n n·∫øu object ƒë√≥ c√≥ ƒë·ªß th√¥ng tin, ng∆∞·ª£c l·∫°i s·∫Ω b√°o l·ªói.
 *
 * Ki·ªÉu tr·∫£ v·ªÅ s·∫Ω l√† `string` n·∫øu `person` l√† `FullNamePerson`,
 * c√≤n n·∫øu kh√¥ng ƒë√∫ng ki·ªÉu th√¨ k·∫øt qu·∫£ s·∫Ω l√† `never`.
 */
function getFullname<T extends object>(
    person: T
): FullNameOrNothing<T> {
    if (
        'firstName' in person &&
        'lastName' in person &&
        person.firstName &&
        person.lastName
    ) {
        // √âp ki·ªÉu th·ªß c√¥ng v√¨ TypeScript kh√¥ng suy ra ƒë√∫ng ki·ªÉu trong if-block
        return `${person.firstName} ${person.lastName}` as FullNameOrNothing<T>;
    }

    throw new Error('No first name and /or last name found');
}

// ‚ùå name1: never ‚Üí v√¨ object truy·ªÅn v√†o kh√¥ng c√≥ firstName v√† lastName n√™n ki·ªÉu tr·∫£ v·ªÅ l√† never
const name1 = getFullname({});

// ‚úÖ name2: string ‚Üí v√¨ object ƒë√∫ng ki·ªÉu FullNamePerson
const name2 = getFullname({ firstName: 'Hieu', lastName: 'Le' });

console.log(name2); // "Hieu Le"
