/**
 * Khai b√°o m·ªôt m·∫£ng ki·ªÉu `Array<string>`
 * - M·∫£ng ch·ªâ ch·ª©a c√°c ph·∫ßn t·ª≠ ki·ªÉu chu·ªói.
 * - T∆∞∆°ng ƒë∆∞∆°ng v·ªõi c√°ch vi·∫øt `string[]`
 */
let names: Array<string> = ['Max', 'Anna'];

/**
 * ƒê·ªãnh nghƒ©a m·ªôt ki·ªÉu d·ªØ li·ªáu t·ªïng qu√°t (generic) `DataStore<T>`.
 * - `T` l√† m·ªôt bi·∫øn ki·ªÉu (type variable) ƒë·∫°i di·ªán cho ki·ªÉu gi√° tr·ªã s·∫Ω ƒë∆∞·ª£c truy·ªÅn v√†o.
 * - `[key: string]: T`:
 *   + ƒê·ªëi t∆∞·ª£ng c√≥ th·ªÉ c√≥ nhi·ªÅu thu·ªôc t√≠nh t√™n l√† chu·ªói (string)
 *   + M·ªói thu·ªôc t√≠nh c√≥ gi√° tr·ªã thu·ªôc ki·ªÉu T
 */
type DataStore<T> = {
    [key: string]: T;
}

/**
 * Kh·ªüi t·∫°o m·ªôt bi·∫øn `store` thu·ªôc ki·ªÉu `DataStore<string | boolean>`.
 * - T·ª©c l√†: `store` c√≥ th·ªÉ c√≥ nhi·ªÅu thu·ªôc t√≠nh chu·ªói,
 * - V√† m·ªói thu·ªôc t√≠nh ƒë√≥ c√≥ th·ªÉ ch·ª©a gi√° tr·ªã l√† `string` ho·∫∑c `boolean`.
 */
let store: DataStore<string | boolean> = {};
// ‚úÖ Th√™m thu·ªôc t√≠nh c√≥ gi√° tr·ªã l√† chu·ªói
store.name = 'Max';
// ‚úÖ Th√™m thu·ªôc t√≠nh c√≥ gi√° tr·ªã l√† boolean
store.isInstructor = true;

let storeNumber: DataStore<number> = {};
storeNumber.age = 25; // h·ª£p l·ªá
storeNumber.salary = 5000; // h·ª£p l·ªá

/**
 * H√†m `merge` l√† m·ªôt h√†m generic v·ªõi 2 type parameter: `T` v√† `U`.
 * - `T` ƒë·∫°i di·ªán cho ki·ªÉu c·ªßa ƒë·ªëi s·ªë `a`
 * - `U` ƒë·∫°i di·ªán cho ki·ªÉu c·ªßa ƒë·ªëi s·ªë `b`
 * - H√†m tr·∫£ v·ªÅ m·ªôt m·∫£ng g·ªìm 2 ph·∫ßn t·ª≠: ph·∫ßn t·ª≠ ƒë·∫ßu l√† ki·ªÉu `T`, ph·∫ßn t·ª≠ sau l√† ki·ªÉu `U`
 * => ƒêi·ªÅu n√†y cho ph√©p `merge` k·∫øt h·ª£p 2 gi√° tr·ªã c√≥ th·ªÉ c√≥ ki·ªÉu kh√°c nhau.
 */
function merge<T, U>(a: T, b: U) {
    return [a, b]; // Tr·∫£ v·ªÅ m·∫£ng [T, U]
}

/**
 * G·ªçi h√†m `merge` v·ªõi c·∫£ hai tham s·ªë ƒë·ªÅu l√† `number`.
 * - `T = number`, `U = number`
 * - Tr·∫£ v·ªÅ: [1, 2] (ki·ªÉu: [number, number])
 */
const ids = merge<number, number>(1, 2); // ‚úÖ [1, 2]

/**
 * G·ªçi h√†m `merge` v·ªõi ki·ªÉu k·∫øt h·ª£p `number` v√† `string`.
 * - `T = number`, `U = string`
 * - Tr·∫£ v·ªÅ: [1, 'max'] (ki·ªÉu: [number, string])
 */
const ids1 = merge<number, string>(1, 'max'); // ‚úÖ [1, 'max']

/**
 * H√†m `mergeObj` l√† m·ªôt h√†m generic d√πng ƒë·ªÉ g·ªôp (merge) hai object c√≥ th·ªÉ kh√°c ki·ªÉu.
 *
 * @typeParam T - Ki·ªÉu c·ªßa object ƒë·∫ßu ti√™n (a)
 * @typeParam U - Ki·ªÉu c·ªßa object th·ª© hai (b)
 *
 * - `T extends object` v√† `U extends object`: ƒë·∫£m b·∫£o c·∫£ hai tham s·ªë ƒë·ªÅu ph·∫£i l√† object.
 * - S·ª≠ d·ª•ng c√∫ ph√°p spread `{...a, ...b}` ƒë·ªÉ t·∫°o object m·ªõi ch·ª©a t·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa c·∫£ `a` v√† `b`.
 * - K·∫øt qu·∫£ tr·∫£ v·ªÅ c√≥ ki·ªÉu `T & U` (intersection type) ‚Äì k·∫øt h·ª£p ki·ªÉu c·ªßa c·∫£ hai object.
 */
function mergeObj<T extends object, U extends object>(a: T, b: U) {
    return { ...a, ...b }; // Tr·∫£ v·ªÅ object m·ªõi ch·ª©a c√°c key/value t·ª´ c·∫£ a v√† b
}


/**
 * G·ªçi h√†m `mergeObj` v·ªõi hai object c√≥ ki·ªÉu kh√°c nhau:
 *
 * - `{ userName: 'Max' }` c√≥ ki·ªÉu `{ userName: string }`
 * - `{ age: 36 }` c√≥ ki·ªÉu `{ age: number }`
 *
 * Khi g·ªçi, TypeScript t·ª± suy ra ki·ªÉu k·∫øt qu·∫£ l√†:
 * {
 *   userName: string;
 * } & {
 *   age: number;
 * }
 *
 * üëâ K·∫øt qu·∫£ l√† m·ªôt object ch·ª©a c·∫£ 2 thu·ªôc t√≠nh: `userName` v√† `age`
 */
const merged = mergeObj({ userName: 'Max' }, { age: 36 });

// ‚úÖ In ra object k·∫øt qu·∫£ ƒë√£ merge:
// üëâ { userName: 'Max', age: 36 }
console.log(merged);

/**
 * ƒê·ªãnh nghƒ©a l·ªõp `User` v·ªõi ki·ªÉu generic `T`.
 * - Ki·ªÉu `T` ƒë·∫°i di·ªán cho ki·ªÉu d·ªØ li·ªáu c·ªßa thu·ªôc t√≠nh `id`.
 * - Cho ph√©p t·∫°o user v·ªõi `id` l√† string, number, ho·∫∑c b·∫•t k·ª≥ ki·ªÉu n√†o kh√°c.
 */
class User<T> {
    public id: T; // Thu·ªôc t√≠nh `id` c√≥ ki·ªÉu T (do ng∆∞·ªùi d√πng ƒë·ªãnh nghƒ©a)

    /**
     * H√†m kh·ªüi t·∫°o (constructor)
     * @param id - Gi√° tr·ªã ƒë·ªãnh danh cho user, ki·ªÉu T
     */
    constructor(id: T) {
        this.id = id; // G√°n gi√° tr·ªã tham s·ªë id cho thu·ªôc t√≠nh id c·ªßa class
    }
}

/**
 * T·∫°o m·ªôt instance m·ªõi c·ªßa `User` v·ªõi `T = string`.
 * - T·ª©c l√† `id` c√≥ ki·ªÉu string.
 */
const user = new User('i1'); // user: User<string>

// Truy c·∫≠p thu·ªôc t√≠nh `id`, k·∫øt qu·∫£: "i1"
console.log(user.id); // üëâ Output: i1