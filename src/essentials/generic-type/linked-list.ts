/**
 * L·ªõp `ListNode<T>` ƒë·∫°i di·ªán cho m·ªôt n√∫t (node) trong danh s√°ch li√™n k·∫øt.
 * - `T` l√† ki·ªÉu d·ªØ li·ªáu generic cho gi√° tr·ªã m√† node l∆∞u tr·ªØ.
 */
class ListNode<T> {
    next?: ListNode<T>; // Con tr·ªè ƒë·∫øn node k·∫ø ti·∫øp (n·∫øu c√≥)
    public value: T;
    /**
     * Kh·ªüi t·∫°o m·ªôt node m·ªõi v·ªõi gi√° tr·ªã ƒë∆∞·ª£c truy·ªÅn v√†o.
     * @param value - Gi√° tr·ªã c·ªßa node, c√≥ ki·ªÉu generic T
     */
    constructor(value: T) {
        this.value = value;
    }
}

/**
 * L·ªõp `LinkedList<T>` m√¥ t·∫£ m·ªôt danh s√°ch li√™n k·∫øt ƒë∆°n (singly linked list).
 * - `T` l√† ki·ªÉu d·ªØ li·ªáu cho c√°c ph·∫ßn t·ª≠ trong danh s√°ch.
 */
class LinkedList<T> {
    private root?: ListNode<T>; // Node ƒë·∫ßu ti√™n c·ªßa danh s√°ch
    private tail?: ListNode<T>; // Node cu·ªëi c√πng c·ªßa danh s√°ch
    private length = 0; // S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ trong danh s√°ch

    /**
     * Th√™m m·ªôt ph·∫ßn t·ª≠ v√†o cu·ªëi danh s√°ch.
     * @param value - Gi√° tr·ªã c·∫ßn th√™m, ki·ªÉu T
     */
    add(value: T) {
        const node = new ListNode(value); // T·∫°o node m·ªõi

        if (!this.root || !this.tail) {
            // N·∫øu danh s√°ch r·ªóng, node m·ªõi s·∫Ω l√† c·∫£ root v√† tail
            this.root = node;
            this.tail = node;
        } else {
            // N·∫øu danh s√°ch ƒë√£ c√≥ ph·∫ßn t·ª≠, n·ªëi node m·ªõi v√†o sau tail
            this.tail.next = node; // Tail hi·ªán t·∫°i tr·ªè ƒë·∫øn node m·ªõi
            this.tail = node;      // C·∫≠p nh·∫≠t tail m·ªõi
        }

        this.length++; // TƒÉng ƒë·ªô d√†i danh s√°ch
    }

    /**
     * Ch√®n ph·∫ßn t·ª≠ v√†o v·ªã tr√≠ ch·ªâ ƒë·ªãnh (theo ch·ªâ s·ªë pos).
     * @param value - gi√° tr·ªã c·∫ßn ch√®n
     * @param pos - v·ªã tr√≠ c·∫ßn ch√®n (t√≠nh t·ª´ 0)
     */
    insertAt(value: T, pos: number) {
        if (pos > -1 && pos <= this.length && this.root) {
            let current = this.root;
            let previous = current;
            let index = 0;
            const node = new ListNode(value);

            if (pos === 0) {
                // Ch√®n v√†o ƒë·∫ßu danh s√°ch
                node.next = this.root;
                this.root = node;
            } else {
                // Duy·ªát ƒë·∫øn v·ªã tr√≠ ch√®n
                while (index++ < pos && current.next) {
                    previous = current;
                    current = current.next;
                }
                // Ch√®n node m·ªõi v√†o v·ªã tr√≠ ƒë√£ duy·ªát t·ªõi
                node.next = current;
                previous.next = node;
            }

            this.length++; // TƒÉng ƒë·ªô d√†i danh s√°ch
            return true;
        } else {
            return true; // Tr·∫£ v·ªÅ true m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng h·ª£p l·ªá (c√≥ th·ªÉ thay b·∫±ng false)
        }
    }

    /**
     * X√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ ch·ªâ ƒë·ªãnh.
     * @param pos - v·ªã tr√≠ c·∫ßn x√≥a (t√≠nh t·ª´ 0)
     * @returns node ƒë√£ b·ªã x√≥a ho·∫∑c null n·∫øu kh√¥ng th√†nh c√¥ng
     */
    removeAt(pos: number) {
        if (pos > -1 && pos < this.length && this.root) {
            let current = this.root;
            let previous: ListNode<T> = current;
            let index = 0;

            if (pos === 0) {
                // X√≥a ph·∫ßn t·ª≠ ƒë·∫ßu
                this.root = current.next;
            } else {
                // Duy·ªát ƒë·∫øn v·ªã tr√≠ c·∫ßn x√≥a
                while (index++ < pos && current.next) {
                    previous = current;
                    current = current.next;
                }
                // Lo·∫°i b·ªè node t·∫°i pos
                previous.next = current.next;
            }

            this.length--; // Gi·∫£m ƒë·ªô d√†i danh s√°ch
            return current; // Tr·∫£ v·ªÅ node ƒë√£ b·ªã x√≥a
        } else {
            return null; // Kh√¥ng h·ª£p l·ªá
        }
    }


    /**
     * Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ hi·ªán c√≥ trong danh s√°ch.
     */
    getNumberOfElements() {
        return this.length;
    }

    /**
     * Duy·ªát v√† in to√†n b·ªô gi√° tr·ªã trong danh s√°ch li√™n k·∫øt.
     */
    print() {
        let current = this.root; // B·∫Øt ƒë·∫ßu t·ª´ node ƒë·∫ßu ti√™n

        while (current) {
            console.log(current.value); // In gi√° tr·ªã node hi·ªán t·∫°i
            current = current.next;     // Di chuy·ªÉn sang node ti·∫øp theo
        }
    }
}

// ========================
// S·ª≠ d·ª•ng danh s√°ch li√™n k·∫øt
// ========================
// Kh·ªüi t·∫°o danh s√°ch li√™n k·∫øt s·ªë
const numberList = new LinkedList<number>();

// Th√™m ph·∫ßn t·ª≠ v√†o danh s√°ch
numberList.add(3);       // [3]
numberList.add(10);      // [3, 10]
numberList.add(20);      // [3, 10, 20]

// In danh s√°ch ban ƒë·∫ßu
console.log("Danh s√°ch ban ƒë·∫ßu:");
numberList.print();      // üëâ 3\n10\n20

// üü° Ch√®n s·ªë 5 v√†o v·ªã tr√≠ 1
numberList.insertAt(5, 1); // [3, 5, 10, 20]

console.log("\nSau khi insertAt(5, 1):");
numberList.print(); // üëâ 3\n5\n10\n20

// üî¥ Xo√° ph·∫ßn t·ª≠ ·ªü v·ªã tr√≠ 2
numberList.removeAt(2);  // Xo√° 10 => [3, 5, 20]

console.log("\nSau khi removeAt(2):");
numberList.print(); // üëâ 3\n5\n20
