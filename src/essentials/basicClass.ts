/**
 * L·ªõp `User` ƒë·∫°i di·ªán cho m·ªôt ng∆∞·ªùi d√πng v·ªõi t√™n, tu·ªïi, s·ªü th√≠ch v√† m·∫≠t kh·∫©u.
 */
class User {
    /**
     * T√™n c·ªßa ng∆∞·ªùi d√πng.
     * @type {string}
     */
    public name: string;

    /**
     * Tu·ªïi c·ªßa ng∆∞·ªùi d√πng, ch·ªâ c√≥ th·ªÉ truy c·∫≠p t·ª´ trong class ho·∫∑c class con.
     * @type {number}
     */
    protected age: number;

    /**
     * M·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng (ch·ªâ truy c·∫≠p t·ª´ b√™n trong class).
     * @type {string}
     */
    private password: string;

    /**
     * M·∫£ng c√°c s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng.
     * @type {string[]}
     */
    public hobbies: string[] = [];

    /**
     * H√†m kh·ªüi t·∫°o (constructor) t·∫°o ra m·ªôt ƒë·ªëi t∆∞·ª£ng User m·ªõi.
     *
     * @param {string} name - T√™n ng∆∞·ªùi d√πng.
     * @param {number} age - Tu·ªïi ng∆∞·ªùi d√πng.
     * @param {string} password - M·∫≠t kh·∫©u ng∆∞·ªùi d√πng.
     */
    constructor(name: string, age: number, password: string) {
        this.name = name;
        this.age = age;
        this.password = password; // M·∫≠t kh·∫©u ƒë∆∞·ª£c l∆∞u tr·ªØ trong `private` v√† kh√¥ng th·ªÉ truy c·∫≠p t·ª´ b√™n ngo√†i.
    }

    /**
     * G·ª≠i l·ªùi ch√†o v√† hi·ªÉn th·ªã tu·ªïi c·ªßa ng∆∞·ªùi d√πng.
     */
    public greet(): void {
        console.log('My age: ' + this.age);
    }

    /**
     * L·∫•y tu·ªïi hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng.
     * @returns {number} Tu·ªïi c·ªßa ng∆∞·ªùi d√πng.
     */
    public getAge(): number {
        return this.age;
    }

    /**
     * C·∫≠p nh·∫≠t tu·ªïi ng∆∞·ªùi d√πng n·∫øu h·ª£p l·ªá.
     * @param {number} newAge - Tu·ªïi m·ªõi c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
     */
    public setAge(newAge: number): void {
        if (newAge > 0) {
            this.age = newAge;
        }
    }

    /**
     * X√°c th·ª±c m·∫≠t kh·∫©u ng∆∞·ªùi d√πng.
     * @param {string} enteredPassword - M·∫≠t kh·∫©u ƒë∆∞·ª£c nh·∫≠p v√†o.
     * @returns {boolean} Tr·∫£ v·ªÅ true n·∫øu m·∫≠t kh·∫©u kh·ªõp.
     */
    public checkPassword(enteredPassword: string): boolean {
        return enteredPassword === this.password;
    }
}

/**
 * L·ªõp `Admin` k·∫ø th·ª´a t·ª´ `User` v√† c√≥ th·ªÉ truy c·∫≠p thu·ªôc t√≠nh protected `age`.
 */
class Admin extends User {
    /**
     * Danh s√°ch quy·ªÅn c·ªßa admin.
     * @type {string[]}
     */
    public permissions: string[];

    /**
     * @param {string} name - T√™n admin.
     * @param {number} age - Tu·ªïi admin.
     * @param {string[]} permissions - Quy·ªÅn c·ªßa admin.
     * @param {string} password - M·∫≠t kh·∫©u admin.
     */
    constructor(name: string, age: number, permissions: string[], password: string) {
        super(name, age, password);
        this.permissions = permissions;
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa admin.
     */
    public showDetails(): void {
        console.log(`${this.name} is ${this.age} years old and has permissions: ${this.permissions.join(', ')}`);
    }

    /**
     * Admin x√°c th·ª±c m·∫≠t kh·∫©u c·ªßa m√¨nh.
     * @param {string} enteredPassword - M·∫≠t kh·∫©u nh·∫≠p v√†o.
     * @returns {boolean} Tr·∫£ v·ªÅ true n·∫øu m·∫≠t kh·∫©u c·ªßa admin kh·ªõp.
     */
    public checkAdminPassword(enteredPassword: string): boolean {
        return this.checkPassword(enteredPassword); // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c c·ªßa class cha ƒë·ªÉ ki·ªÉm tra m·∫≠t kh·∫©u
    }
}

// =======================
// üß™ S·ª≠ d·ª•ng class
// =======================

const max = new User('Max', 36, 'password123');
const fred = new User('Fred', 39, '1234password');

// ‚úÖ In ra danh s√°ch s·ªü th√≠ch (m·∫£ng hobbies)
max.hobbies = ['Reading', 'Travelling']; // Th√™m s·ªü th√≠ch cho Max
fred.hobbies = ['Gaming', 'Cooking']; // Th√™m s·ªü th√≠ch cho Fred

console.log(max.hobbies);  // In ra s·ªü th√≠ch c·ªßa Max
console.log(fred.hobbies); // In ra s·ªü th√≠ch c·ªßa Fred

// ‚úÖ G·ªçi ph∆∞∆°ng th·ª©c greet ƒë·ªÉ in tu·ªïi
max.greet();  // G·ªçi greet c·ªßa Max, s·∫Ω in "My age: 36"
fred.greet(); // G·ªçi greet c·ªßa Fred, s·∫Ω in "My age: 39"

// ‚úÖ S·ª≠ d·ª•ng setter ƒë·ªÉ thay ƒë·ªïi tu·ªïi v√¨ age l√† protected
max.setAge(37);
console.log('Max tu·ªïi m·ªõi l√†: ' + max.getAge());

// ‚úÖ X√°c th·ª±c m·∫≠t kh·∫©u ng∆∞·ªùi d√πng
console.log(max.checkPassword('password123')); // true
console.log(fred.checkPassword('wrongpassword')); // false

// ‚úÖ S·ª≠ d·ª•ng admin class
const admin = new Admin('Alice', 40, ['edit', 'delete'], 'admin123');
admin.showDetails(); // ‚úÖ Truy c·∫≠p ƒë∆∞·ª£c `age` v√¨ n√≥ l√† `protected`
console.log(admin.checkAdminPassword('admin123')); // true
console.log(admin.checkAdminPassword('wrongpass')); // false
